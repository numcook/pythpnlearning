#文件操作

#1）打开文件
#open()函数用于打开文件，其语法格式如下：
#open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)
#参数说明：
#file: 必需，文件路径（相对或者绝对路径）。
#mode: 可选，文件打开模式。
#buffering: 设置缓冲
#encoding: 一般使用utf8
#errors: 报错级别
#newline: 区分换行符
#closefd:传入的file参数类型
#opener: 设置自定义开启器，开启器的返回值必须是一个打开的文件描述符。

#2）文件打开模式
#模式	描述
#'r'	以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。
#'rb'	以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。
#'r+'	打开一个文件用于读写。文件指针将会放在文件的开头。
#'rb+'	以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。
#'w'	以写入方式打开文件。如果文件存在会被覆盖。如果文件不存在，创建新文件。
#'wb'	以二进制格式打开一个文件只用于写入。如果文件存在会被覆盖。如果文件不存在，创建新文件。
#'w+'	打开一个文件用于读写。如果文件存在会被覆盖。如果文件不存在，创建新文件。
#'wb+'	以二进制格式打开一个文件只用于写入。如果文件存在会被覆盖。如果文件不存在，创建新文件。
#'a'	打开一个文件用于追加。如果文件存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
#'ab'	以二进制格式打开一个文件用于追加。如果文件存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入
 
#3）关闭文件
#close()方法用于关闭一个已打开的文件。关闭后的文件不能再进行读写操作，否则会触发ValueError错误。
#语法格式如下：
#fileObject.close()
#可以将close()方法写在finally语句块中，保证文件无论是否发生异常都会被关闭。
#或者使用with as语句，with语句会在代码块执行完毕后自动关闭文件。

#4）文件读写
#文本文件和二进制文件通用的方法如下：
#有以下几种方法：
#read(size=-1)方法从一个打开的文件中读取字符串。需要指定一个可选的参数size。如果指定了size，那么会读取指定字节的数据；如果未指定，则会从文件当前位置一直读取到文件结束，并返回整个文件内容。
#write(str)方法将字符串写入文件中。需要指定一个字符串参数。
#flush()方法是用来刷新缓冲区的，即将缓冲区中的数据立刻写入文件，同时清空缓冲区，不需要调用close()方法。
#truncate([size])方法用于截断文件，截断后文件的大小为size指定的新大小，默认为当前文件大小。
#seek(offset, from)方法用于移动文件读取指针到指定位置。需要指定一个偏移量（offset），表示要移动的字节数。from指定开始移动的参考位置，默认值为0，表示文件开头，1表示当前位置，2表示文件末尾。
#readline([size])方法用于从文件中读取一行，需要指定一个可选的参数size。如果指定了size，那么会读取指定字节数的数据；如果未指定，则会从文件当前位置一直读取到文件结束，并返回整个文件内容。
#readlines()方法用于读取所有行(直到结束符 EOF)并返回列表，该列表可以由 for... in ... 结构进行处理。
#writelines()方法用于向文件中写入一序列的字符串。


#文件管理

#1）os模块
#os模块提供了丰富的方法用来处理文件和目录。常用的方法如下：
#os.rename(src, dst)方法用于重命名文件或目录,src表示源文件或目录，dst表示目标文件或目录。
#os.remove(path)方法用于删除指定路径的文件。如果指定的路径是一个目录，将抛出OSError。
#os.mkdir(path[, mode])方法用于以数字mode创建目录。默认的 mode 为 0777。
#os.rmdir(path)方法用于删除指定路径的目录。仅当这文件夹是空的才可以, 否则, 抛出OSError。
#os.walk(top[, topdown=True[, οnerrοr=None[, followlinks=False]]])方法用于通过在目录树中游走输出在目录中的文件名，向上或者向下。
#os.listdir(path)方法用于返回指定的文件夹包含的文件或文件夹的名字的列表。
#os.curdir()方法用于返回当前工作目录。
#os.pardir()方法用于返回当前目录的父目录字符串名。在UNIX，Windows中都是'..'。

#2)os.path模块
#os.path模块主要用于获取文件的属性。
#常用的方法如下：
#os.path.abspath(path)方法用于返回绝对路径。
#os.path.basename(path)方法用于返回文件名。
#os.path.dirname(path)方法用于返回文件路径。
#os.path.exists(path)方法用于判断指定路径是否存在。
#os.path.getsize(path)方法用于返回文件大小。
#os.path.isfile(path)方法用于判断指定路径是否存在且是一个文件。
#os.path.isdir(path)方法用于判断指定路径是否存在且是一个目录。
#os.path.getatime(path)方法用于返回最近访问时间。
#os.path.getmtime(path)方法用于返回最近文件修改时间。
#os.path.getctime(path)方法用于返回文件创建时间。