#正则表达式是预先定义好的字符模式，用于匹配和查找字符串中的特定字符组合 
#正则表达式由普通字符（例如，a 到 z 之间的字母）和特殊字符（称为"元字符"）组成


#1）元字符
#元字符由基本元字符和普通字符组成
#基本元字符：^取反或一行开始、$一行结束、.任意字符、*任意次数、+至少一次、?0或1次、{n}定义量词、
#[]定义字符类、()定义分组、|定义或、\转义字符

#a）字符转义：\字符
#例如:\w匹配字母、数字或下划线字符、\.匹配字符点

#b)开始和结束：^和$
#当字符开始结束有^和$时，表示匹配整个字符串，而不是字符串中的某一部分.


#2）字符类
#字符类由方括号括起来，表示匹配方括号中的任意一个字符
#例如：[abc]匹配a、b、c中的任意一个字符
#字符类可以使用^取反，表示匹配除了方括号中的任意一个字符
#例如：[^abc]匹配除了a、b、c中的任意一个字符
#字符类可以使用-表示范围，表示匹配方括号中的任意一个字符
#例如：[a-z0-9]匹配a到z中的任意一个字符和0到9中的任意一个字符
#预定义字符类：\w匹配任何语言字符、数字或下划线字符、\W匹配非字母、数字或下划线字符、\d匹配任意数字、\D匹配任意非数字字符、\s匹配任意空白字符、\S匹配任意非空白字符
#            .匹配除换行符以外的任意字符、\\匹配一个反斜杠字符、\n匹配一个换行符、\r匹配一个回车符、\t匹配一个制表符、\b匹配一个退格符、\f匹配一个换页符
     

#3）量词
#量词用于指定匹配的次数
#例如：*表示匹配0次或多次、+表示匹配1次或多次、?表示匹配0次或1次、{n}表示匹配n次、{n,}表示匹配至少n次、{n,m}表示匹配至少n次，最多m次
#贪婪量词：*、+、?、{n}、{n,}、{n,m}、默认匹配尽可能多的字符
#懒惰量词：*?、+?、??、{n}?、{n,}?、{n,m}?、匹配尽可能少的字符，在贪婪量词后面加上?即可


#4）分组
#分组由圆括号括起来，表示匹配圆括号中的任意一个字符
#例如：(abc)匹配abc中的任意一个字符
#分组可以使用|表示或，表示匹配圆括号中的任意一个字符
#例如：(abc|def)匹配abc或def中的任意一个字符

#分组命名：(?P<name>pattern)表示命名分组，name是分组的名称，pattern是分组的模式
#若不命名，则组用为1、2、3等
#例如：(?P<area>\d{3,4})-(?P<phone>\d{7,8})表示匹配区号和电话号码，区号和电话号码分别命名为area和phone
#分组引用：\1表示引用第一个分组，\2表示引用第二个分组，以此类推(引用内容为该组第一次匹配的内容)

#非捕获分组：(?:pattern)表示非捕获分组，pattern是分组的模式
#例如：
#s='img1.jpg,img2.jpg,img3.jpg'
#re.findall(r'img(\d+).jpg',s)返回['1','2','3']
#re.findall(r'img(?:\d+).jpg',s)返回['img1.jpg','img2.jpg','img3.jpg']


#5)re模块
#re是python内置的用于处理正则表达式的模块

#a）search()和match()函数
#search()函数在字符串中搜索模式，返回第一个匹配的结果，如果没有找到匹配的结果，则返回None
#match()函数在字符串的开始位置搜索模式，返回第一个匹配的结果，如果没有找到匹配的结果，则返回None

#b）findall()和finditer()函数
#findall()函数在字符串中搜索模式，返回所有匹配的结果，如果没有找到匹配的结果，则返回空列表
#finditer()函数在字符串中搜索模式，返回所有匹配的结果的迭代器，如果没有找到匹配的结果，则返回空迭代器
#例如：
#s='img1.jpg,img2.jpg,img3.jpg'
#re.findall(r'img(\d+).jpg',s)返回['1','2','3']
#re.finditer(r'img(\d+).jpg',s)返回一个迭代器，迭代器中的每个元素都是一个匹配的结果，可以使用for循环遍历迭代器，也可以使用next()函数获取下一个匹配的结果

#c）sub()函数
#sub()函数用于替换字符串中的匹配项，返回替换后的字符串
#格式：re.sub(pattern,repl,string,count=0,flags=0)
#例如：
#p=r'\d+'
#test='ab12cd34ef56'
#re.sub(p,'*',test)返回'ab*cd*ef*'

#d）split()函数
#split()函数用于将字符串按照模式分割，返回分割后的字符串列表
#格式：re.split(pattern,string,maxsplit=0,flags=0)


#6）编译正则表达式
#re.compile()函数用于编译正则表达式，返回一个正则表达式对象
#编译的正则表达式可以被多次使用，提高效率
#格式：re.compile(pattern,flags=0) flags是正则表达式的标志位，用于控制正则表达式的行为
#例如：
#p=re.compile(r'\d+')
#test='ab12cd34ef56'
#p.findall(test)返回['12','34','56']

#7）正则表达式的标志位
#re.I：忽略大小写
#re.L：本地化
#re.M：多行模式,^和$匹配每一行的开始和结束,而不是整个字符串的开始和结束
#re.S：单行模式,.匹配所有字符,包括换行符
#re.U：Unicode字符
#re.X：详尽模式，忽略空白字符，允许使用#进行注释，可以有空格和换行
#re.A：ASCII字符
#需要设置多个编译标志位时，可以使用|运算符，例如：re.I|re.M